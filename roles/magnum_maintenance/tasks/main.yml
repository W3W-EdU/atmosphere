# Copyright (c) 2023 VEXXHOST, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Get details for the cluster
  changed_when: false
  run_once: true
  ansible.builtin.command:
    openstack coe cluster show {{ magnum_maintenance_cluster_id }} --format json
  environment:
    OS_CLOUD: atmosphere
  register: _magnum_maintenance_cluster_details

- name: Save fact with the cluster details
  run_once: true
  set_fact:
    _magnum_maintenance_cluster: "{{ _magnum_maintenance_cluster_details.stdout | from_json }}"

- name: Detect the network ID from "fixed_network"
  run_once: true
  when: _magnum_maintenance_cluster.fixed_network != None
  ansible.builtin.set_fact:
    _magnum_maintenance_cluster_network_id: "{{ _magnum_maintenance_cluster.fixed_network }}"

- name: Detect the network ID from the Heat stack
  run_once: true
  when: _magnum_maintenance_cluster.fixed_network == None
  block:
    - name: Get the network resource from the stack
      ansible.builtin.command: |
        openstack stack resource show {{ _magnum_maintenance_cluster.stack_id }} network \
          --format json
      environment:
        OS_CLOUD: atmosphere
      register: _magnum_maintenance_heat_network_resource

    - name: Grab the "fixed_network" attribute from the stack
      ansible.builtin.set_fact:
        _magnum_maintenance_cluster_network_id: "{{ _magnum_maintenance_heat_network_resource.stdout | from_json | json_query('attributes.fixed_network') }}"

- name: Assert the cluster is ready to be modified
  run_once: true
  ansible.builtin.assert:
    that:
      - _magnum_maintenance_cluster.status in ['DELETE_IN_PROGRESS', 'DELETE_FAILED']
    fail_msg: "The cluster is not in a state that can be modified (status: {{ _magnum_maintenance_cluster.status }})"

- name: Assert the cluster network ID is detected
  run_once: true
  ansible.builtin.assert:
    that:
      - _magnum_maintenance_cluster_network_id is not defined
      - _magnum_maintenance_cluster_network_id != None
    fail_msg: "The cluster network ID could not be detected"

- name: Retrieve DHCP agent hosting the cluster network
  run_once: true
  ansible.builtin.command:
    openstack network agent list \
      --network {{ _magnum_maintenance_cluster_network_id }} \
      --column Host \
      --format value
  environment:
    OS_CLOUD: atmosphere
  register: _magnum_maintenance_cluster_dhcp_agents

- name: Toggle the maintenance state of the cluster
  vars:
    _magnum_maintenance_network_host: "{{ _magnum_maintenance_cluster_dhcp_agents.stdout_lines[0] }}"
  block:
    - name: Create temporary file for KUBECONFIG
      run_once: true
      delegate_to: "{{ _magnum_maintenance_network_host }}"
      ansible.builtin.tempfile:
        state: file
        prefix: "{{ _magnum_maintenance_cluster.uuid }}"
        suffix: .kubeconfig
      register: _magnum_maintenance_kubeconfig

    - name: Retrieve KUBECONFIG
      run_once: true
      ansible.builtin.import_role:
        name: magnum_kubeconfig
      vars:
        magnum_kubeconfig_cluster_project_id: "{{ _magnum_maintenance_cluster.project_id }}"
        magnum_kubeconfig_cluster_id: "{{ _magnum_maintenance_cluster.uuid }}"
        magnum_kubeconfig_host: "{{ _magnum_maintenance_network_host }}"
        magnum_kubeconfig_path: "{{ _magnum_maintenance_kubeconfig.path }}"

    - name: Toggle auto-healer
      ansible.builtin.include_role:
        name: magnum_auto_healer
      when:
        - "'auto_healing_enabled' in _magnum_maintenance_cluster.labels"
        - "'auto_healing_controller' in _magnum_maintenance_cluster.labels"
        - _magnum_maintenance_cluster.labels.auto_healing_enabled | bool
        - _magnum_maintenance_cluster.labels.auto_healing_controller == 'magnum-auto-healer'
      vars:
        magnum_auto_healer_state: "{% if magnum_maintenance_state == 'present' %}absent{% else %}present{% endif %}"
        magnum_auto_healer_cluster_kubeconfig: "{{ _magnum_maintenance_kubeconfig.path }}"
        magnum_auto_healer_cluster_network_id: "{{ _magnum_maintenance_cluster_network_id }}"
        magnum_auto_healer_cluster_network_host: "{{ _magnum_maintenance_network_host }}"

    - name: Toggle auto-scaler
      ansible.builtin.include_role:
        name: magnum_auto_scaler
      when:
        - "'auto_scaling_enabled' in _magnum_maintenance_cluster.labels"
        - _magnum_maintenance_cluster.labels.auto_scaling_enabled | bool
      vars:
        magnum_auto_scaler_state: "{% if magnum_maintenance_state == 'present' %}absent{% else %}present{% endif %}"
        magnum_auto_scaler_cluster_kubeconfig: "{{ _magnum_maintenance_kubeconfig.path }}"
        magnum_auto_scaler_cluster_network_id: "{{ _magnum_maintenance_cluster_network_id }}"
        magnum_auto_scaler_cluster_network_host: "{{ _magnum_maintenance_network_host }}"

    # TODO(mnaser): Toggle auto-scaler
  always:
    - name: Remove temporary file for KUBECONFIG
      run_once: true
      delegate_to: "{{ _magnum_maintenance_network_host }}"
      ansible.builtin.file:
        path: "{{ _magnum_maintenance_kubeconfig.path }}"
        state: absent
